function process_neuralynx
% Create a neurodata folder, with >rat>session sub-folders, then fill 
% subfolders with day#.mat files containing variables: file, eptrials,
% clusters. The day#.mat files are generated by processing raw neuralynx
% files.
%
% Origin (raw neuralynx) files must be organized and named a particular way. The
% organization is 1 folder per subject. This folder contains all session
% files. Session files must be named such that they contain (somewhere) a stage
% abbreviation (i.e., accl, cont, ot, delay) and the last item in the name must
% be the day number (e.g., accl_1 or 2013-11-07_09-39-44_accl_1 or
% accl_2013-11-07_09-39-44_1).


%path to raw neuralynx files (origin)
%path_origin = '/Volumes/LaCie/LVdata/';
path_origin = '/Users/ampm/Documents/MATLAB/lindseyvedder/LVorigindata/';

%path to neurodata (destination)
path_destination = '/Users/ampm/Documents/MATLAB/lindseyvedder/';

%get all the things in neurodata folder...
file_list_stages = dir(path_origin);

%hard coded erasure of irrelevant directory folders
file_list_stages(1:2) = [];

%exclude non-folders
file_names_stages = {file_list_stages([file_list_stages(:).isdir])};

%number of folders
length_stages = size(file_names_stages{:},1);

%iterate through stages
for stage = length_stages%1:2%1:length_stages

    %display update
    current_stage = file_names_stages{:}(stage,1).name
    
    %get all the things in stage folder...
    file_list_sessions = dir(strcat(path_origin, num2str(file_names_stages{:}(stage,1).name)));

    %hard coded erasure from file_list_stages of irrelevant directory folders
    file_list_sessions(1:2) = [];
    
    %number of folders
    length_sessions = size(file_list_sessions,1);
    
    %prepare session counters
    counter_1 = 0;
    counter_2 = 0;
    counter_3 = 0;
    counter_4 = 0;
    counter_5 = 0;
    
    %iterate through session folders
    for session = 1:length_sessions
        
        %current session file name
        session_file = file_list_sessions(session).name;
        current_session = session_file
        
        %identify subject from session file name
        switch logical(true)
            case ~isempty(strfind(session_file, 'R1689'))
                subject = 'R1689';
                counter_1 = counter_1 + 1;
                session_number = counter_1;
            case ~isempty(strfind(session_file, 'R1749'))
                subject = 'R1749';
                counter_2 = counter_2 + 1;
                session_number = counter_2;
            case ~isempty(strfind(session_file, 'R1752'))
                subject = 'R1752';
                counter_3 = counter_3 + 1;
                session_number = counter_3;
            case ~isempty(strfind(session_file, 'R1756'))
                subject = 'R1756';
                counter_4 = counter_4 + 1;
                session_number = counter_4;
            case ~isempty(strfind(session_file, 'R1763'))
                subject = 'R1763';
                counter_5 = counter_5 + 1;
                session_number = counter_5;
            otherwise
                warning(strcat('subject not identified for -', session_file))
        end
        
        %establish '01, 02... 10' format for session number
        if session_number < 10
            session_number = strcat('0', num2str(session_number));
        else
            session_number = num2str(session_number);
        end
  
        %check for clusts file (indicating clustering)       
        %load session
        load(strcat(path_origin, current_stage, '/', current_session));
        
        if ~exist('ERROR_L', 'var')
            ERROR_L = [];
        end
        if ~exist('ERROR_R', 'var')
            ERROR_R = [];
        end
        
        if exist('FAKE_ON', 'var')
            %run pretrials
            [eptrials section_boundaries lost_trials] = lv_pretrials(vid, ttun, spiketimes, REWARD_L, REWARD_R, ITI_ON, ITI_OFF, LIGHT_ON, FAKE_ON, LIGHT_OFF, TRIAL_START);
      	else
            %run trials
            [eptrials section_boundaries lost_trials] = lv_trials(vid, ttun, spiketimes, REWARD_L, REWARD_R, ERROR_L, ERROR_R, ITI_ON, ITI_OFF, LEFT_ON, LEFT_OFF, RIGHT_ON, RIGHT_OFF, TRIAL_START, TRIAL_START_L, TRIAL_START_R, TRIAL_START_L_TURN, TRIAL_START_R_TURN);
        end
        
        
        %calcluate clusters
        clusters = unique(eptrials(eptrials(:,4)~= 1 & ~isnan(eptrials(:,4)),4));
        out_reward = rwd_outliers(eptrials, lost_trials);
        out_stem = stem_outliers(eptrials, lost_trials);
        light_on_sect = light_on_section(eptrials, section_boundaries, lost_trials);
        
        
        %check if destination has a neurodata folder, if not, create it.
        if ~exist(strcat(path_destination, 'neurodata'), 'dir')
            mkdir(strcat(path_destination, 'neurodata'))
        end

        %check if destination has corresponding rat folder, if not, create it.
        if ~exist(strcat(path_destination, 'neurodata/', subject), 'dir')
            mkdir(strcat(path_destination, 'neurodata/', subject))
        end

        %check if destination has corresponding stage folder, if not, create it.
        if ~exist(strcat(path_destination, 'neurodata/', subject, '/', current_stage), 'dir')
            mkdir(strcat(path_destination, 'neurodata/', subject, '/', current_stage))
        end

        %origin file
        origin_file = strcat(path_origin, subject, '/', session_file);

        %save session in correct destination folder
        save(strcat(path_destination, 'neurodata/', subject, '/', current_stage, '/', session_number), 'eptrials', 'section_boundaries', 'lost_trials', 'origin_file', 'clusters', 'current_stage', 'session_number', 'out_reward', 'out_stem', 'light_on_sect')

        %clear variables
        clear eptrials
        clear origin_file
        clear section_boundaries
        clear clusters
        clear out_reward
        clear out_stem
        clear light_on_sect

    end

end

end